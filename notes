Rules:

Play is divided into a deployment phase and a combat phase:
  1) Each player takes turns placing stones, until 16 - 24 stones have been placed.
    The combat phase then begins.

  2) Players alternate moving. A piece may move one square orthogonally or may
  jump one or more adjacent pieces of either color.

  3) A piece that has two enemy pieces on either side, horizontally or vertically,
  is blocked and cannot be moved. Flip this piece over, or whatever. If a piece that
  was capturing an opponents piece itself becomes blocked, the opponents piece
  becomes freed.
    -- Captured pieces can assist in capturing themselves (thereby freeing themselves)

  4) Instead of moving, a player may capture a blocked enemy piece.

  5) A piece cannot move between two enemy pieces, unless by doing so one of the
  enemy pieces is trapped.

  6) A player reduced to one piece loses.

Possible optional rules:
  -- During deployment, once a minimum number of stones has been placed, either
  player may choose to not place a stone and move instead (this probably doesn't
  make sense, given that players are placing stones in sequence)

  -- Allowing some degree of further movement; either throwing a foursided dice
  and moving a piece that many squares, or being able to move (say) two squares,
  or full rook move.

  -- Dispensing with the 'check, then capture' thing and just taking when sandwiched

Board is stored in DB as a modified FEN string. Serialized into a 0xBoardLength list.
Move notation provided as startMove endMove in typical algebraic style, the fn can convert.

Notation:
Modified FEN.
Basically, give the moves as single squares for the deploy phase, then as pairs for the movement phase

FEN:
  color   free  checked
  white   w     W
  black   b     B

[position string] [board_width] [board_height] [active_player in w|b] [stone_count] [gamePhase in d|m] [half_move_clock] [full_move_clock]

Position string is the same as a FEN string.

Stone placement: algebraic coordinates of the stone's placement.

Quiet move: algebraic coordinates of origin, destination.

Jump: Algebraic coordinates of start, every square the piece travels through

Check: e4 e5 x d5

Capture: d5+

Okay, frankly, to hell with all of the fancy algebraic notation... Wait a second.
What if the board is serialized into a dictionary of lists. or a list of lists.
No, when you serialize the board, do a (width + 1)*(height + 1) array, but store it
flat b/c that's the easiest thing to do. that removes the need to check if it's on
the board, which should speed up performance.

Okay, so the engine needs to be able to:

Public API Methods:
-- Create a game (need two players)
  -- Initiate an empty game
    POST /game
    returns: gameId

  -- Join a game
    POST /game/<gameID>?<playerId>
    returns: gameObject

  -- Poll a game
    GET /game/<gameId>
    returns gameObject

  -- Handle a move in that game
    POST /move?<move_start>&<move_end>&<optional getMovesFlag for if you want the response object to include possible moves>
    returns new gameObject

  -- Get all legal moves in a game
    GET /move?<gameId>
    return movesObject (or whatever it'll be called)

Private API Methods:
  -- serialize / deserialize FEN strings

  -- Check to see if move is legal

  -- Generate move list

  -- Create new FEN from old FEN
Flow:
  - Player 1 POST /game to create game
    - Player 1 starts polling server to wait for match
  - Player 2 GET /game to get all open games
  - Player 2 POST(?) /game/{game_id} to join game
  - Adjust game state
  - Both players poll the server for game updates, and use POST /move etc to make moves

Tests:
  - /game
    -- POST /game
    -- GET /game/{game_id} and check that it's well formed
    -- DELETE /game and check that it doesn't exist
  - /user
    -- POST /user/username
    -- GET /user/user_id -- check that it's well formed
    -- DELETE /user/user_id -- check that it doesn't exist
  - /participant
    -- POST /

squares look like:
  {
    occupied: Bool,
    checked: False | (checking_sq_1, checking_sq_2) : (int)
    owner: 0|1,
    valid: Bool
  }

  One can get around storing which pieces are capturing a piece.

  Possible rule changes:
  -- Custodial check, then displacement capture (by either piece or a third piece)
  -- No placing phase
  -- Pieces can only move backwards by jumping (might remove need for checking at all)
  -- side of the board (possibly player's edges?) counts as a piece for checking
  -- Possibly, no jumping backwards over enemy pieces
  -- maybe board_width-2 pieces?
  -- Major change w/o historical basis: any piece can be captured by displacement if it borders 2 enemy stones

  Decision: No deployment phase.

  -- Note: Maybe allow multiple captures, as in hasami shogi
  -- talk of "city" in laius pisonis might refer to the creation / attack of drawing fortresses
  -- In at least one variant of hasami shogi, the opponent's board edge can aid in capturing your stones
    (ie, your board edge acts as if it were occupied entirely by your stones) (though i think this might be a bug? maybe it's some kind of 'if you have no liberties' thing)
  -- Consider alternate #s of pieces to capture for win (ie, you win when you cap 4) in the vein of hasami shogi

  -- I'm not the only one to consider the possibility that the one places a 'camp' marker that one must then defend.
  A model with three types of pieces. This actually works. If the pieces are hemispherical, players'
  pieces can be distinguished by flipping them. One possibility is that there are 'officers'
  who move like rooks, 'soldiers' who move either like pawns or one space orthogonally,
  and some kind of either "camp" token that must be defended or "dux" token that's like a king.
  This isn't supported by that one board that they found, but I don't know if it's
  reasonable to assume that board was set up correctly anyway

  On multiple piece types: if we want "officers" and "ordinarii", represent check with a ' (or other char)
  before the piece in the fen.

  I'm getting a little bit hung up on rules. I think that I may need to make a thorough accounting of what
  rules we want to account for.
  -- Multiple piece types (ordinarii, "officers", "king", "city")
  -- different capture conditions for piece: surround on n sides for capture, or simple enter to capture
  -- Multiple move types (rook-like, or single step)
  -- different capture types: displacement, custodial, delayed custodial
  -- optional use of a binding "check"
  -- different win conditions: reduce to one piece, capture n pieces, capture "city" or "king"
  -- "tandem move", allowing rectangles (or possibly just squares) of pieces to move as one
  -- allowing or disallowing jumping
  -- allowing or disallowing backwards moves

"Chogo 44" is someone else's attempt to recreate LL, and I agree with a number of their ideas

So one of the big things here is that we can have pieces keep track of themselves, as well
as their own move validation.

Okay, there might be a little bit too much going on here? maybe, maybe not.

I'm going to delay implementation of delayed custodial capture, b/c i don't want
to write the extra code for that

game-wide rules:
  -- capture conditions
  -- use of check (which i should really rename "trap")
  -- win conditions
  -- phalanx move (i'm going to dead this for now; too much extra work)
cap: [d|c|dC] for displacement, custodial, delayed custodial
win: [int|-int|char] # a player loses when they have int or fewer pieces remaining. 0 if it's win by capturing k
trap: T|t for whether using trap (yes, no)
phalanx: P|p for whether using phalanx(yes, no)
ex:
d-4Tp for displacement capture, win on capture 4 enemy stones, using Trapping, no phalanx

[fen_as_conventionally_defined] [rules_string] [piece definitions]

piece definitions:
  -- piece_char
  -- move_step (either unlimited or 1) : 0: none, 1: 1, 2: unlimited
  -- free_move_list [move_forwards, move_right, move_backwards, move_left]
  -- trapped_move_list [] : not necessary
  -- jump_list [] | 0: no jump, 1: jump anything, 2: jump only friendly
  -- allow_jump_friendly_while_trapped J: True j: False
  -- trapped_jump_list
  -- sides_to_trap/cap
  -- lose_on_capture t/f
old_notation:
ordinarii:
o,fM|1101,fJ|1121,tJ|2222,2,f
equestrian:
e,fM|2222,fJ|1111,tJ|2222,2,f
king:
k,fM|2222,fJ|1111,tJ|1111,4,t

new_notation(19:17 3/7/17):
ordinarii:
o,1101,1121,J,2,f

[piece_char][]
